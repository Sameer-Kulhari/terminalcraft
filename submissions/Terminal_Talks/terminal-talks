#!/usr/bin/env python3

import os
import queue
import sounddevice as sd
import vosk
import sys
import json

MODEL_PATH = os.path.join(os.path.dirname(__file__), "model")

if not os.path.exists(MODEL_PATH):
    print("‚ùå Vosk model not found in ./model")
    sys.exit(1)

model = vosk.Model(MODEL_PATH)
q = queue.Queue()

command_map = {
    "list files": "ls",
    "make directory": "mkdir <foldername>",
    "go to downloads": "cd ~/Downloads",
    "show hidden files": "ls -a",
    "remove file": "rm <filename>",
    "check ip address": "ip a",
    "go back": "cd ..",
    "list everything": "ls -l",
    "clear screen": "clear",
    "check python version": "python3 --version"
}

def callback(indata, frames, time, status):
    if status:
        print("[!] Mic status:", status, file=sys.stderr)
    q.put(bytes(indata))

def recognize():
    print("üéôÔ∏è Speak now (Ctrl+C to stop)...")
    with sd.RawInputStream(samplerate=16000, blocksize=8000, dtype='int16',
                           channels=1, callback=callback):
        rec = vosk.KaldiRecognizer(model, 16000)
        while True:
            data = q.get()
            if rec.AcceptWaveform(data):
                result = json.loads(rec.Result())
                return result.get("text", "")

def main():
    try:
        text = recognize()
        print(f"üìù You said: {text}")
        spoken = text.strip().lower()
        if spoken in command_map:
            print(f"\nüí° Suitable command for this action is:\n‚Üí {command_map[spoken]}")
        else:
            print("\n‚ö†Ô∏è No matching command found.")
            print("Try saying something like 'list files' or 'show hidden files'.")
    except KeyboardInterrupt:
        print("\nüëã Exiting Terminal Talks.")
    except Exception as e:
        print("‚ùå Error:", e)

if __name__ == "__main__":
    main()
